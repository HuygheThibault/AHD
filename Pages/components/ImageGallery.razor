@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

<div class="image-gallery">
    @foreach (var image in ImageUrls)
    {
        <div class="image-gallery__item" @onclick="() => OpenModal(image)">
            <img src="@image" alt="Gallery Image" class="image-gallery__thumbnail" />
        </div>
    }
</div>

@if (IsModalOpen)
{
    <div class="image-gallery__modal" @onkeydown="HandleKeyPress" tabindex="0" role="dialog" aria-modal="true">
        <div class="image-gallery__modal-content">
            <button class="arrow-button close" @onclick="CloseModal" aria-label="Close">&times;</button>
            <button class="arrow-button" @onclick="PreviousImage" aria-label="Previous" disabled="@(!CanGoToPrevious)">&lt;</button>
            <div class="modal-image-container">
                <img src="@SelectedImage" alt="Full-Size Image" class="modal-image" />
            </div>
            <button class="arrow-button" @onclick="NextImage" aria-label="Next" disabled="@(!CanGoToNext)">&gt;</button>
        </div>
    </div>
}

@code {
    [Parameter] public List<string> ImageUrls { get; set; }

    private bool IsModalOpen { get; set; }
    private string SelectedImage { get; set; }
    private int SelectedImageIndex { get; set; }

    // Calculate if can go to previous or next image
    private bool CanGoToPrevious => SelectedImageIndex > 0;
    private bool CanGoToNext => SelectedImageIndex < ImageUrls.Count - 1;

    // Method to open modal with the selected image
    private async Task OpenModal(string imageUrl)
    {
        SelectedImageIndex = ImageUrls.IndexOf(imageUrl);
        SelectedImage = imageUrl;
        IsModalOpen = true;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private void PreviousImage()
    {
        if (CanGoToPrevious)
        {
            SelectedImageIndex--;
            SelectedImage = ImageUrls[SelectedImageIndex];
        }
    }

    private void NextImage()
    {
        if (CanGoToNext)
        {
            SelectedImageIndex++;
            SelectedImage = ImageUrls[SelectedImageIndex];
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (IsModalOpen)
        {
            switch (e.Key)
            {
                case "Escape":
                    CloseModal();
                    break;
                case "ArrowLeft":
                    PreviousImage();
                    break;
                case "ArrowRight":
                    NextImage();
                    break;
            }
        }
    }
}
